package com.revature.daos.methods;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import com.revature.daos.SurveyRequestDAO;
import com.revature.model.SurveyRequest;
import com.revature.util.ConnectionDB;

public class SurveyRequestDAOMethods implements SurveyRequestDAO {
	
	private static Logger log = Logger.getRootLogger();
	
	@Override
	public SurveyRequest getSurveyRequestById(int id) {
		
		String sql = "select * from requests where requestId = ?";
		SurveyRequest sr = null;
		
		try(Connection c = ConnectionDB.getConnection();
				PreparedStatement ps = c.prepareStatement(sql)){
			
			ps.setInt(1,id);			
			ResultSet rs= ps.executeQuery();
			
			while(rs.next()) {
				
				int requestId = rs.getInt("requestId");
				int uwmrequest = rs.getInt("uwmrequest");
				int requestType = rs.getInt("requestType");
				Date requestDate = rs.getDate("requestDate");
				int showType = rs.getInt("showType");
				int requestState = rs.getInt("requestState");
				int peopleExpected = rs.getInt("peopleExpected");
				int requestLocation = rs.getInt("requestLocation");
							
				sr= new SurveyRequest(
						requestId, 
						uwmrequest, 
						requestType, 
						requestDate, 
						showType, 
						requestState,
						peopleExpected, 
						requestLocation);
			}
			rs.close();
			log.info("Request summited succesfully");
			return sr;
			
		} catch (SQLException e) {
			
			e.printStackTrace();
			return null;
		}
		
		
		
	}

	@Override
	public List<SurveyRequest> getSurveyRequests() {
		List<SurveyRequest> srqts = new ArrayList<>();
		String sql = "select * from requests";
		try (Connection c = ConnectionDB.getConnection();
				Statement s = c.createStatement();
				ResultSet rs = s.executeQuery(sql);){
			
			while(rs.next()) {
				
				int requestId = rs.getInt("requestId");
				int uwmrequest = rs.getInt("uwmrequest");
				int requestType = rs.getInt("requestType");
				Date requestDate =  rs.getDate("requestDate");
				int showType = rs.getInt("showType");
				int requestState = rs.getInt("requestState");
				int peopleExpected = rs.getInt("peopleExpected");
				int requestLocation = rs.getInt("requestLocation"); 
			
				SurveyRequest sr = new SurveyRequest(
						requestId, 
						uwmrequest, 
						requestType , 
						requestDate, 
						showType, 
						requestState,
						peopleExpected, 
						requestLocation);
				
				srqts.add(sr);
				
				
			
			}
			return srqts;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public List<SurveyRequest> getSurveyResquestsByUserId(int userId) {
		List<SurveyRequest> srqts = new ArrayList<>();
		String sql = "select * from requests where uwmrequest ="+userId;
		try (Connection c = ConnectionDB.getConnection();
				Statement s = c.createStatement();
				ResultSet rs = s.executeQuery(sql);){
			
			while(rs.next()) {
				
				int requestId = rs.getInt("requestId");
				int uwmrequest = rs.getInt("uwmrequest");
				int requestType = rs.getInt("requestType");
				Date requestDate =  rs.getDate("requestDate");
				int showType = rs.getInt("showType");
				int requestState = rs.getInt("requestState");
				int peopleExpected = rs.getInt("peopleExpected");
				int requestLocation = rs.getInt("requestLocation"); 
			
				SurveyRequest sr = new SurveyRequest(
						requestId, 
						uwmrequest, 
						requestType , 
						requestDate, 
						showType, 
						requestState,
						peopleExpected, 
						requestLocation);
				
				srqts.add(sr);
				
				
			
			}
			return srqts;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public int updateSurveyRequest(SurveyRequest sr) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int createSurveyRequest(SurveyRequest sr) {
		// TODO Auto-generated method stub
		return 0;
	}

}
